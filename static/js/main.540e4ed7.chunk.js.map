{"version":3,"sources":["context/Page/PageContext.js","context/Favorite/FavoriteContext.js","components/Page.jsx","components/Navbar.jsx","components/Favorite.jsx","context/types.jsx","context/Page/PageReducer.js","api/api.js","context/Page/PageState.js","context/Favorite/FavoriteReducer.js","context/Favorite/FavoriteState.js","App.js","reportWebVitals.js","index.js"],"names":["PageContext","createContext","FavoriteContext","useContext","state","getCats","setFetching","setFavoriteCat","useState","currentPage","setCurrentPage","useEffect","fetching","prevState","document","addEventListener","scrollHandler","removeEventListener","e","target","documentElement","scrollHeight","scrollTop","window","innerHeight","className","cats","map","item","src","url","alt","onClick","id","title","Navbar","props","exact","to","getFavoriteCats","deleteCat","favoriteCats","length","totalCount","image","GET_CATS","FETCHING","GET_FAVORITE_CATS","SET_TOTAL_COUNT","DELETE_CAT","SET_FAVORITE_CAT","PageReducer","action","type","instance","axios","baseURL","headers","catsAPI","get","post","delete","PageState","useReducer","dispatch","updateFetching","Provider","value","then","response","data","finally","children","FavoriteReducer","count","cat","filter","FavoriteState","page","setTimeout","catch","err","console","log","deleteCatState","App","path","component","Page","Favorite","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.540e4ed7.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const PageContext = createContext()","import {createContext} from 'react';\r\n\r\nexport const FavoriteContext = createContext()","import {useContext, useEffect, useState} from \"react\";\r\nimport {PageContext} from \"../context/Page/PageContext\";\r\nimport {FavoriteContext} from \"../context/Favorite/FavoriteContext\";\r\n\r\nexport default () => {\r\n\r\n    const {state, getCats, setFetching} = useContext(PageContext);\r\n    const {setFavoriteCat} = useContext(FavoriteContext);\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n\r\n    useEffect(() => {\r\n        if (state.fetching) {\r\n            setCurrentPage(prevState => prevState + 1)\r\n            getCats(currentPage)\r\n        }\r\n    }, [state.fetching])\r\n    // Делаем запрос картинок с текущей страницей, если fetching: true\r\n    // Затем добавляем текущей странице +1\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', scrollHandler)\r\n        return function () {\r\n            document.removeEventListener('scroll', scrollHandler)\r\n        }\r\n    }, [state.fetching])\r\n    // Добавляем и удаляем слушателя документу при изменении fetching\r\n\r\n\r\n    const scrollHandler = e => {\r\n        if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100) {\r\n            setFetching(true)\r\n        }\r\n    }\r\n    // Функция для определения уровня скролла.\r\n    // При setFetching: true - происходит подгрузка данных\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"gallery\">\r\n                {state.cats.map(item =>\r\n                    <div className=\"gallery__item\" key={item.id}>\r\n                        <div className=\"hover-block\"></div>\r\n                        <img className=\"gallery__img\"  src={item.url} alt=\"\"/>\r\n                        <button className=\"gallery__btn\" onClick={()=>setFavoriteCat(item.id)} title=\"Добавить котика\">\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"navbar\">\r\n                <div className=\"container\">\r\n                    <ul className=\"navbar__items\">\r\n                        <li className=\"navbar__item\">\r\n                            <NavLink className=\"navbar__link\" exact to='/'>Все котики</NavLink>\r\n                        </li>\r\n                        <li className=\"navbar__item\">\r\n                            <NavLink className=\"navbar__link \" to='/favorite'>Любимые котики</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\nexport default Navbar;","import {useContext, useEffect, useState} from \"react\";\r\nimport {FavoriteContext} from \"../context/Favorite/FavoriteContext\";\r\n\r\nexport default () => {\r\n\r\n    const {state, getFavoriteCats, setFetching, deleteCat} = useContext(FavoriteContext);\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (state.fetching) {\r\n            getFavoriteCats(currentPage)\r\n            setCurrentPage(prevState => prevState + 1)\r\n        }\r\n    }, [state.fetching])\r\n    // Делаем запрос картинок с текущей страницей, если fetching: true\r\n    // Затем добавляем текущей странице +1\r\n\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', scrollHandler)\r\n        return function () {\r\n            document.removeEventListener('scroll', scrollHandler)\r\n        }\r\n    }, [state.fetching])\r\n    // Добавляем и удаляем слушателя документу при изменении fetching\r\n\r\n\r\n    const scrollHandler = e => {\r\n        if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight)\r\n            < 100 && state.favoriteCats.length < state.totalCount) {\r\n            setFetching(true)\r\n        }\r\n    }\r\n    // Функция для определения уровня скролла.\r\n    // При setFetching: true - происходит подгрузка данных\r\n    // Имеет условие чтобы не погружались данные, если их больше нет\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"gallery\">\r\n                {state.favoriteCats.map(item =>\r\n                    <div className=\"gallery__item\" key={item.id}>\r\n                        <div className='hover-block'></div>\r\n                        <img className=\"gallery__img\" src={item.image.url} alt=\"\"/>\r\n                        <button onClick={() => deleteCat(item.id)} className=\"gallery__btn active\"\r\n                                title=\"Убрать котика\"></button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};","export const GET_CATS = 'GET_CATS'\r\nexport const SET_CATS = 'SET_CATS'\r\nexport const FETCHING = 'FETCHING'\r\nexport const GET_FAVORITE_CATS = 'GET_FAVORITE_CATS'\r\nexport const SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nexport const DELETE_CAT = 'DELETE_CAT'\r\nexport const SET_TOTAL_CATS = 'SET_TOTAL_CATS'\r\nexport const SET_FAVORITE_CAT = 'SET_FAVORITE_CAT'\r\n","import {FETCHING, GET_CATS} from \"../types\";\r\n\r\nexport const PageReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case GET_CATS:\r\n            return {...state,cats: [...state.cats, ...action.cats]};\r\n        case FETCHING:\r\n            return {...state, fetching: action.fetching};\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.thecatapi.com/v1/',\r\n    headers: {\r\n        'x-api-key': '03488ee6-4bf2-4798-9586-f45dfffe60ba',\r\n    },\r\n});\r\n\r\nexport const catsAPI = {\r\n    getCats(currentPage) {\r\n        return instance\r\n            .get(`images/search?limit=15&page=${currentPage}`)\r\n    },\r\n    getFavoriteCats(currentPage) {\r\n        return instance\r\n            .get(`favourites/?limit=15&page=${currentPage}`)\r\n    },\r\n    getFavoriteCatsForSet() {\r\n        return instance\r\n            .get(`favourites/`) // Запрос всех понравившихся котиков для загрузки в локальный state последнего элемента\r\n    },\r\n    setFavoriteCat(id) {\r\n        return instance\r\n            .post(`favourites`, {\"image_id\": id})\r\n    },\r\n    deleteCat(id) {\r\n        return instance\r\n            .delete(`favourites/${id}`)\r\n    },\r\n};\r\n\r\n\r\n","import React, {useReducer} from 'react';\r\nimport {PageReducer} from \"./PageReducer\";\r\nimport {FETCHING, GET_CATS} from \"../types\";\r\nimport {catsAPI} from \"../../api/api\";\r\nimport {PageContext} from \"./PageContext\";\r\n\r\nexport const PageState = (props) => {\r\n    let initialState = {\r\n        cats: [],\r\n        fetching: true\r\n    };\r\n    const [state, dispatch] = useReducer(PageReducer, initialState)\r\n\r\n\r\n    const getCatsState = (cats) => ({\r\n        type: GET_CATS,\r\n        cats\r\n    })\r\n    const updateFetching = (fetching) => ({\r\n        type: FETCHING,\r\n        fetching\r\n    })\r\n\r\n    const setFetching = (fetching) => {\r\n        dispatch(updateFetching(fetching))\r\n    }\r\n\r\n    const getCats = () => {\r\n\r\n        catsAPI.getCats().then(response => {\r\n            dispatch(getCatsState(response.data));\r\n\r\n        }).finally(()=> {\r\n            setFetching(false)\r\n        });\r\n        // Получаем данные и останавливаем подгруз данных\r\n\r\n    }\r\n    return (\r\n        <PageContext.Provider value={{\r\n            state, getCats, setFetching\r\n        }}>\r\n            {props.children}\r\n        </PageContext.Provider>\r\n    )\r\n}","import {DELETE_CAT, FETCHING, GET_FAVORITE_CATS, SET_FAVORITE_CAT, SET_TOTAL_COUNT} from \"../types\";\r\n\r\nexport const FavoriteReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case GET_FAVORITE_CATS:\r\n            return {...state, favoriteCats: [...state.favoriteCats, ...action.cats]};\r\n        case FETCHING:\r\n            return {...state, fetching: action.fetching};\r\n        case SET_TOTAL_COUNT:\r\n            return {...state, totalCount: action.count};\r\n        case SET_FAVORITE_CAT:\r\n            return {...state, favoriteCats: [...state.favoriteCats, action.cat]};\r\n        case DELETE_CAT:\r\n            return {...state, favoriteCats: state.favoriteCats.filter(item => item.id !== action.id)};\r\n            //  Удалям из массива картинку с помощью filter\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {useReducer} from 'react';\r\nimport {FavoriteReducer} from \"./FavoriteReducer\";\r\nimport {DELETE_CAT, FETCHING, GET_FAVORITE_CATS, SET_FAVORITE_CAT, SET_TOTAL_COUNT} from \"../types\";\r\nimport {catsAPI} from \"../../api/api\";\r\nimport {FavoriteContext} from \"./FavoriteContext\";\r\n\r\nexport const FavoriteState = (props) => {\r\n    let initialState = {\r\n        favoriteCats: [],\r\n        fetching: true,\r\n        totalCount: 0,\r\n    };\r\n    const [state, dispatch] = useReducer(FavoriteReducer, initialState)\r\n\r\n    const getCats = (cats) => ({\r\n        type: GET_FAVORITE_CATS,\r\n        cats\r\n    })\r\n    const updateFetching = (fetching) => ({\r\n        type: FETCHING,\r\n        fetching\r\n    })\r\n    const setTotalCount = (count) => ({\r\n        type: SET_TOTAL_COUNT,\r\n        count\r\n    })\r\n    const deleteCatState = (id) => ({\r\n        type: DELETE_CAT,\r\n        id\r\n    })\r\n\r\n    const setCat = (cat) => ({\r\n        type: SET_FAVORITE_CAT,\r\n        cat\r\n    })\r\n\r\n    const setFetching = (fetching) => {\r\n        dispatch(updateFetching(fetching))\r\n    }\r\n\r\n    const getFavoriteCats= (page) => {\r\n        catsAPI.getFavoriteCats(page).then(response => {\r\n            dispatch(getCats(response.data));\r\n            dispatch(setTotalCount(response.headers['pagination-count']))\r\n            // Добавляем данные favourites images\r\n            // Получаем количество элементов - сколько всего\r\n\r\n        }).finally(()=> {\r\n            setFetching(false)\r\n            // Останавливаем подгруз данных\r\n\r\n        });\r\n    }\r\n\r\n    const setFavoriteCat = (id) => {\r\n        catsAPI.setFavoriteCat(id)\r\n        setTimeout(()=> {\r\n            catsAPI.getFavoriteCatsForSet().then(response => {\r\n                dispatch(setCat(response.data[response.data.length - 1]))\r\n                // Добавлям в локальный state последний элемент массива из favourites\r\n\r\n            }).catch((err)=>{\r\n                console.log(err)})\r\n        }, 500)\r\n        //\r\n        // Было необходимо подождать 0.5 сек, чтобы корректно отпрвить post запрос, и получить данные\r\n    }\r\n\r\n    const deleteCat = (id) => {\r\n        catsAPI.deleteCat(id)\r\n        dispatch(deleteCatState(id))\r\n    }\r\n    //Удаляем картинку локально и делаем delete запрос\r\n\r\n    return (\r\n        <FavoriteContext.Provider value={{\r\n            state, getFavoriteCats, setFetching, setFavoriteCat, deleteCat\r\n        }}>\r\n            {props.children}\r\n        </FavoriteContext.Provider>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Page from \"./components/Page\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Favorite from \"./components/Favorite\";\r\nimport {PageState} from \"./context/Page/PageState\";\r\nimport {FavoriteState} from \"./context/Favorite/FavoriteState\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <FavoriteState>\r\n                <PageState>\r\n                        <Navbar/>\r\n                        <div>\r\n                            <Switch>\r\n                                <Route path={'/'} exact component={Page}/>\r\n                                <Route path={'/favorite'} exact component={Favorite}/>\r\n                            </Switch>\r\n                        </div>\r\n                </PageState>\r\n            </FavoriteState>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}